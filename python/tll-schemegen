#!/usr/bin/env python3
# vim: sts=4 sw=4 et

import argparse
import importlib.resources
import logging
import os
import pathlib
import shutil
import sys
import tempfile

from mako.lookup import TemplateLookup

from tll import logger
import tll.scheme as S

if not hasattr(importlib.resources, 'files'):
    import pkg_resources
    importlib.resources.files = lambda m: pkg_resources.resource_filename(*m.split('.', 1))

def safe_write(filename, data):
    p = pathlib.Path(filename)
    if not p.parent.exists():
        p.parent.mkdir(parents=True)
    dest, name = tempfile.mkstemp(dir=p.parent, prefix=p.name)

    try:
        os.write(dest, data)
        os.close(dest)
        shutil.move(name, p)
    except:
        os.unlink(name)
        raise

parser = argparse.ArgumentParser(description='Generate source code from scheme')
parser.add_argument('scheme', metavar='SCHEME', type=str,
                    help='scheme file')
parser.add_argument('--help-template', dest='help_template', action='store_true',
                    default=False,
                    help='show template help message')
parser.add_argument('-f', '--format', dest='format', type=str,
                    default='cpp',
                    help='template to use')
parser.add_argument('-o', '--output', dest='output', type=str,
                    help='output file, defaults to stdout')
parser.add_argument('-T', '--template-dir', dest='template_dir', action='append',
                    default=[],
                    help='additional template directories')
parser.add_argument('-l', '--loglevel', dest='loglevel', default='warning',
                    help='logging level', choices=['trace', 'debug', 'info', 'warning', 'error', 'critical'])

channels = parser.add_argument_group('Channel options')
channels.add_argument('-c', '--channel', dest='channel', action='store_true',
                    default=False,
                    help='treat SCHEME as channel and load scheme from it')
channels.add_argument('--control', dest='control', action='store_true',
                    default=False,
                    help='load scheme of control messages')
channels.add_argument('-m', '--module', dest='modules', action='append',
                    default=[],
                    help='additional channel modules')
channels.add_argument('--master', dest='master',
                    help='master channel')
parser.add_argument('--timeout', dest='timeout', type=float,
                    default=1,
                    help='open timeout for channel')

args, rest = parser.parse_known_args()

lookup = TemplateLookup(
        args.template_dir + [importlib.resources.files('tll.templates'), '/usr/share/tll/templates'],
        input_encoding='utf-8',
        output_encoding='utf-8',
        )
tmpl = lookup.get_template(args.format + '.mako')

subparser = argparse.ArgumentParser(description=f'Extra arguments for {args.format} template')
if tmpl.has_def('setup_options'):
    tmpl.get_def('setup_options').render(subparser)

if args.help_template:
    subparser.print_help()
    sys.exit(0)

options = subparser.parse_args(rest)

logger.init()
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)-7s %(name)s: %(message)s')
logger.configure({'levels.*': args.loglevel})

if args.channel:
    from tll.channel import Context
    from tll.processor import Loop
    import time

    timeout = time.time() + args.timeout
    ctx = Context()
    for m in args.modules:
        ctx.load(m)
    master = ctx.Channel(args.master) if args.master else None
    c = ctx.Channel(args.scheme, master=master)
    if master:
        master.open()
    c.open()
    if c.state != c.State.Active:
        loop = Loop()
        if master:
            loop.add(master)
        loop.add(c)
        while c.state == c.State.Opening:
            if timeout < time.time():
                print("Timeout waiting for channel")
                sys.exit(1)
            loop.step(1)
    scheme = c.scheme_control if args.control else c.scheme
    c.close()
    del c
else:
    url = args.scheme
    if '://' not in url:
        url = 'yaml://' + url
    scheme = S.Scheme(url)
data = tmpl.render(S = S, scheme=scheme, options=options)

if args.output in (None, '-'):
    sys.stdout.buffer.write(data)
else:
    safe_write(args.output, data)
