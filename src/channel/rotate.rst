tll-channel-rotate
==================

:Manual Section: 7
:Manual Group: TLL
:Subtitle: File rotation prefix

Synopsis
--------

``rotate+file://FILEPREFIX;dir={r|w|in|out}``


Description
-----------

Channel implements data splitting in several files with continuous reading. Small files can be
compressed when needed or evern moved to backup if old data is not needed. New file is created each
time when special ``Rotate`` control messages is posted into the channel. When channel is opened for
reading it scans all files starting with given prefix and checks that there is no overlapping data,
for example data ranges [0, 100], [101, 200] and [150, 250] are invalid.

Scheme is obtained from last available file or can be overriden from initialization parameters.

Init parameters
~~~~~~~~~~~~~~~

``FILEPREFIX`` - filename prefix of the storage files, files are named as ``fileprefix.{seq}.dat``
and last one that is still used for writing - ``fileprefix.current.dat``. ``seq`` may be last or
first sequence number in the file depending on ``filename-key`` parameter.

``dir={r|w|in|out}`` (default ``r``) - channel mode, read or write. By default channel is opened in
read mode.

``filename-key={first|last}`` (default ``first``) - use first or last file seq number in the name.

``convert=<bool>`` (default ``false``) - reader only, convert messages to common data scheme,
obtained from the last file or from init parameters.

``autoseq=<bool>`` (default ``false``) - writer only, enable automatic message sequence numbers
starting from 0. When channel is opened - continue from last known seq.

Open parameters
~~~~~~~~~~~~~~~

``seq=<UNSIGNED>`` - start reading from specified ``SEQ``, if missing - read from first file start.
Only in read mode.

Control messages
----------------

Control scheme differs in read and write modes: write mode have only one ``Rotate`` message, read
mode have full scheme:

.. code-block:: yaml

  - name: Seek
    id: 10
  - name: EndOfData
    id: 20
  - name: Rotate
    id: 150

``Rotate`` is used to create new file in write mode or generated by the channel when one file is
finished and new is started.

``Seek`` is used to jump to the new position in data stream starting with the seq specified in
``msg->seq``, like in the ``file://`` channel. Current open file can be closed and new one opened if
needed.

``EndOfData`` is generated only once, even if new data is written and then read by channel.

Examples
--------

Create rotate channel passing scheme, compression and io parameters to underlaying file::

  rotate+file:///path/prefix;dir=w;scheme=yaml://scheme.yaml;io=mmap;compression=lz4

See also
--------

``tll-channel-common(7)``, ``tll-channel-file(7)``

..
    vim: sts=4 sw=4 et tw=100
