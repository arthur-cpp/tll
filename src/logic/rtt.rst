tll-logic-rtt
=============

:Manual Section: 7
:Manual Group: TLL
:Subtitle: Round trip time measure logic

Synopsis
--------

::

    tll.proto: rtt
    payload: <size>
    chained: <bool>

Defined in module ``tll-logic-rtt``

Description
-----------

Logic sends message with timestamp embedded in the body and measures round trip time when it is
returned. It can be configured to receive messages sent by itself or from other instance of ``rtt``
logic: in first case ``timer``, ``output`` and ``input`` channels should be defined, in second -
generating logic should have ``timer`` and ``output``, recieving - only ``input``.

There are two available generating modes: send message when reply is received (chained mode) or on
timer event only. Chained mode is available only when logic receives messages generated by itself.

Channels
~~~~~~~~

``timer`` - source of timer events, data and message type is not checked. If timer is defined then
exactly one ``output`` is needed.

``output`` - output channel used to send data, if ``timer`` is present - exactly one channel should
be provided, otherwise it is not used.

``input`` - input channel.

``result`` - optional, post measured time in theese channels in same format as described in `Output
scheme`_.

Init parameters
~~~~~~~~~~~~~~~

``payload=<size>`` (default ``128b``) - size of extra data payload included in the message

``chained=<bool>`` (default ``false``) - if enabled - send next data message as soon as reply is
received. Not available if there is no ``output`` channel defined.

Output scheme
-------------

One each received message RTT logic ``Data`` message that can be sent into ``quantile://`` logic
(see ``tll-logic-quantile(7)``). In simple cases (RTT greater then ~10us and large number of
messages, where time introduced by calculating and printing are does not affect even 99 quantile) it
can be connected directly into ``input`` of quantile logic::

  processor.objects:
  ...
    rtt:
      init: rtt://
      channels: {timer: rtt-timer, output: output, input: input}
      depends: quantile
    quantile:
      init: quantile://;quantile=50,90,95
      channels: {input: rtt, timer: quantile-timer}
    ...

But preferred way is to place ``quantile`` into separate worker, normally where ``stat://`` logic
lives, and feed it via pair of memory rings::

  processor.objects:
  ...
    rtt:
      init: rtt://
      channels: {timer: rtt-timer, output: output, input: input, result: rtt-mem}
      depends: rtt-mem
    rtt-mem:
      init: mem://;master=quantile-mem
    quantile-mem:
      worker: stat
      init: mem://;size=1mb;
      depends: quantile
    quantile:
      worker: stat
      init: quantile://;quantile=50,90,95
      channels: {input: quantile-mem, timer: stat-timer}
    ...

Examples
--------

Generate messages in chained mode, timer is used only for initialization (and stale checks):

.. code-block:: yaml

  processor.module:
    - module: tll-logic-rtt

  processor.objects:
    rtt:
      init: rtt://;chained=yes;payload=1kb
      channels: {timer: timer, output: output, input: input}
      depends: output
    input:
      init: pub+tcp://./pub.sock;mode=client
      depends: rtt-recv
    output:
      init: pub+tcp://./pub.sock;mode=server
    timer:
      init: timer://;interval=1s
      depends: rtt

Generate message each 10ms in one instance and get them in another, calculate quantiles:

.. code-block:: yaml

  processor.module:
    - module: tll-logic-rtt
    - module: tll-logic-stat

  processor.objects:
    rtt-send:
      init: rtt://
      channels: {timer: timer, output: output}
      depends: output
    rtt-recv:
      init: rtt://
      channels: {input: input}
      depends: quantile
    input:
      init: pub+tcp://./pub.sock;mode=client
      depends: rtt-recv
    output:
      init: pub+tcp://./pub.sock;mode=server
    timer:
      init: timer://;interval=10ms
      depends: input, rtt-send

    quantile:
      init: quantile://;quantile=50,90,95;skip=1000
      channels: {input: rtt-recv, timer: stat-timer}
    stat-timer:
      init: timer://;interval=1s
      depends: quantile

See also
--------

``tll-logic-common(7)``

..
    vim: sts=2 sw=2 et tw=100
